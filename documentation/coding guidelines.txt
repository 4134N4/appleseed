
* naming conventions

  - namespaces: a single (preferably short) word in lower case
      . excepted for namespaces hiding implementation details in header
        files: in this case, add a _impl suffix: namespace thread_impl
  - types, enums, unions, structs, classes, public constants: CamelCaps
  - functions, variables, class methods and members:
      . lower case, words separated with underscores
      . global variables: g_ prefix
      . class members: m_ prefix
          . excepted in vector, matrix, color and aabb classes
          . excepted for private implementation (impl)



* coding guidelines

  indentation

    - tab size 4, indent 4, tabs as spaces
    - curly braces on their own line
    - keywords public, protected and private indented with two spaces

  spacing

    - operators + - * / % = == != < > <= >=
        . surrounded by spaces
        . excepted after 'operator' keyword
    - references and pointers: int& x, int* p
    - no spaces around brackets
    - no spaces around parenthesis, excepted after control flow keywords
      (if for while do)
    - no space before commas, one space after commas
    - during definition, template <...> statements go on their one line

  style

    - usage of struct and class:
      use struct only for trivial classes, otherwise stick to class, even
      if all members are public. the goal is to simplify forward declarations,
      where it seems mandatory to use the same keyword (struct or class) as in
      the definition.

    - inline keyword:
      in general, don't *declare* functions/methods inline, but *define* them
      as inline.

  comments

    - comments on their own lines start with capital letter and end with a
      period.
    - comments on the same line as code start with a lower case letter and
      don't end with a period.

  formatting examples

    // Definition of the template function foo.
    template <typename T>
    inline void foo(void* ptr)
    {
        delete [] ptr;
    }
