
color normal_to_color(normal Normal)
{
    return color(Normal[0] + 1.0, Normal[1] + 1.0, Normal[2] + 1.0) * 0.5;
}

surface tangents_test(
    int flip_handedness = 0)
{
    // flip v
    float vv = 1.0 - v;

    if (vv < 0.2)
    {
        // test backfacing.
        if (backfacing())
            Ci = color(1.0, 0.25, 0.0) * emission();
        else
            Ci = color(0.0, 0.25, 1.0) * emission();
    }
    else if (vv < 0.25)
    {
        // black
    }
    else if (vv < 0.45)
    {
        // test N.
        Ci = normal_to_color(N) * emission();
    }
    else if (vv < 0.5)
    {
        // black
    }
    else if (vv < 0.70)
    {
        // test dPdx, dPdy cross product.
        normal Normal = normalize(calculatenormal(P));
        Ci = normal_to_color(Normal) * emission();
    }
    else if (vv < 0.75)
    {
        // black
    }
    else
    {
        // test dPdu, dPdv cross product.
        normal Normal;

        if (flip_handedness)
            Normal = normalize(cross(dPdv, dPdu));
        else
            Normal = normalize(cross(dPdu, dPdv));

        Ci = normal_to_color(Normal) * emission();
    }
}
