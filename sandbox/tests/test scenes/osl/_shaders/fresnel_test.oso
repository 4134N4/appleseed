OpenShadingLanguage 1.00
# Compiled by oslc 1.5.7dev
surface fresnel_test
param	float	ior	1.5 		 %read{13,52} %write{2147483647,-1}
global	vector	I	 %read{0,0} %write{2147483647,-1}
global	normal	N	 %read{3,61} %write{2147483647,-1}
global	closure color	Ci	 %read{2147483647,-1} %write{63,63}
local	float	___216_IdotN	 %read{44,52} %write{42,42}
local	float	___216_k	 %read{48,53} %write{47,47}
local	float	___217_c	 %read{4,32} %write{3,6}
local	float	___217_g	 %read{18,32} %write{17,20}
local	float	___219_beta	 %read{25,33} %write{21,21}
local	float	___219_F	 %read{29,37} %write{27,36}
local	vector	___221_R	 %read{2147483647,-1} %write{11,11}
local	vector	___221_T	 %read{2147483647,-1} %write{50,60}
local	float	Kt	 %read{2147483647,-1} %write{40,59}
local	float	Kr	 %read{38,62} %write{37,58}
temp	vector	$tmp1	 %read{3,51} %write{0,0}
const	string	$const1	"fresnel"		 %read{1,2} %write{2147483647,-1}
const	int	$const2	0		 %read{4,48} %write{2147483647,-1}
temp	int	$tmp2	 %read{5,5} %write{4,4}
const	string	$const3	"reflect"		 %read{7,7} %write{2147483647,-1}
temp	float	$tmp3	 %read{9,9} %write{8,8}
temp	float	$tmp4	 %read{10,10} %write{9,9}
const	float	$const5	2		 %read{9,9} %write{2147483647,-1}
temp	vector	$tmp5	 %read{11,11} %write{10,10}
const	float	$const6	1		 %read{14,58} %write{2147483647,-1}
temp	float	$tmp6	 %read{14,14} %write{13,13}
const	string	$const7	"sqr"		 %read{12,34} %write{2147483647,-1}
temp	float	$tmp7	 %read{15,15} %write{14,14}
temp	float	$tmp8	 %read{17,17} %write{15,15}
temp	float	$tmp9	 %read{17,17} %write{16,16}
const	float	$const8	0		 %read{18,62} %write{2147483647,-1}
temp	int	$tmp10	 %read{19,19} %write{18,18}
temp	float	$tmp11	 %read{23,23} %write{22,22}
temp	float	$tmp12	 %read{24,24} %write{23,23}
temp	float	$tmp13	 %read{27,27} %write{24,24}
temp	float	$tmp14	 %read{26,26} %write{25,25}
temp	float	$tmp15	 %read{27,27} %write{26,26}
const	float	$const9	0.5		 %read{31,31} %write{2147483647,-1}
temp	float	$tmp16	 %read{30,30} %write{29,29}
temp	float	$tmp17	 %read{31,31} %write{30,30}
temp	float	$tmp18	 %read{36,36} %write{35,35}
temp	float	$tmp19	 %read{33,33} %write{32,32}
temp	float	$tmp20	 %read{35,35} %write{33,33}
temp	float	$tmp21	 %read{39,39} %write{38,38}
temp	float	$tmp22	 %read{40,40} %write{39,39}
const	string	$const10	"refract"		 %read{41,41} %write{2147483647,-1}
temp	float	$tmp23	 %read{46,46} %write{43,43}
temp	float	$tmp24	 %read{45,45} %write{44,44}
temp	float	$tmp25	 %read{46,46} %write{45,45}
temp	float	$tmp26	 %read{47,47} %write{46,46}
temp	int	$tmp27	 %read{49,49} %write{48,48}
const	vector	$const12	0 0 0		 %read{50,60} %write{2147483647,-1}
temp	vector	$tmp28	 %read{56,56} %write{51,51}
temp	float	$tmp29	 %read{54,54} %write{52,52}
temp	float	$tmp30	 %read{54,54} %write{53,53}
temp	float	$tmp31	 %read{55,55} %write{54,54}
temp	vector	$tmp32	 %read{56,56} %write{55,55}
temp	closure color	$tmp33	 %read{63,63} %write{61,61}
const	string	$const13	"diffuse"		 %read{61,61} %write{2147483647,-1}
temp	color	$tmp34	 %read{63,63} %write{62,62}
code ___main___
# fresnel_test.osl:5
# 	fresnel(-I, N, ior, Kr, Kt);
	neg		$tmp1 I 	%filename{"fresnel_test.osl"} %line{5} %argrw{"wr"}
	functioncall	$const1 61 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:239
# 
	functioncall	$const1 61 	%filename{"/home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h"} %line{239} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:211
#     float c = dot(I, N);
	dot		___217_c $tmp1 N 	%line{211} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:212
#     if (c < 0)
	lt		$tmp2 ___217_c $const2 	%line{212} %argrw{"wrr"}
	if		$tmp2 7 7 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:213
#         c = -c;
	neg		___217_c ___217_c 	%line{213} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:214
#     R = reflect(I, N);
	functioncall	$const3 12 	%line{214} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:200
# vector reflect (vector I, vector N) { return I - 2*dot(N,I)*N; }
	dot		$tmp3 N $tmp1 	%line{200} %argrw{"wrr"}
	mul		$tmp4 $const5 $tmp3 	%argrw{"wrr"}
	mul		$tmp5 $tmp4 N 	%argrw{"wrr"}
	sub		___221_R $tmp1 $tmp5 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:215
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	functioncall	$const7 14 	%line{215} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp6 ior ior 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:215
#     float g = 1.0 / sqr(eta) - 1.0 + c * c;
	div		$tmp7 $const6 $tmp6 	%line{215} %argrw{"wrr"}
	sub		$tmp8 $tmp7 $const6 	%argrw{"wrr"}
	mul		$tmp9 ___217_c ___217_c 	%argrw{"wrr"}
	add		___217_g $tmp8 $tmp9 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:216
#     if (g >= 0.0) {
	ge		$tmp10 ___217_g $const8 	%line{216} %argrw{"wrr"}
	if		$tmp10 58 61 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:217
#         g = sqrt (g);
	sqrt		___217_g ___217_g 	%line{217} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:218
#         float beta = g - c;
	sub		___219_beta ___217_g ___217_c 	%line{218} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:219
#         float F = (c * (g+c) - 1.0) / (c * beta + 1.0);
	add		$tmp11 ___217_g ___217_c 	%line{219} %argrw{"wrr"}
	mul		$tmp12 ___217_c $tmp11 	%argrw{"wrr"}
	sub		$tmp13 $tmp12 $const6 	%argrw{"wrr"}
	mul		$tmp14 ___217_c ___219_beta 	%argrw{"wrr"}
	add		$tmp15 $tmp14 $const6 	%argrw{"wrr"}
	div		___219_F $tmp13 $tmp15 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:220
#         F = 0.5 * (1.0 + sqr(F));
	functioncall	$const7 30 	%line{220} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp16 ___219_F ___219_F 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:220
#         F = 0.5 * (1.0 + sqr(F));
	add		$tmp17 $const6 $tmp16 	%line{220} %argrw{"wrr"}
	mul		___219_F $const9 $tmp17 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:221
#         F *= sqr (beta / (g+c));
	add		$tmp19 ___217_g ___217_c 	%line{221} %argrw{"wrr"}
	div		$tmp20 ___219_beta $tmp19 	%argrw{"wrr"}
	functioncall	$const7 36 	%argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:210
#     float sqr(float x) { return x*x; }
	mul		$tmp18 $tmp20 $tmp20 	%line{210} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:221
#         F *= sqr (beta / (g+c));
	mul		___219_F ___219_F $tmp18 	%line{221} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:222
#         Kr = F;
	assign		Kr ___219_F 	%line{222} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:223
#         Kt = (1.0 - Kr) * eta*eta;
	sub		$tmp21 $const6 Kr 	%line{223} %argrw{"wrr"}
	mul		$tmp22 $tmp21 ior 	%argrw{"wrr"}
	mul		Kt $tmp22 ior 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:226
#         T = refract(I, N, eta);
	functioncall	$const10 58 	%line{226} %argrw{"r"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:202
#     float IdotN = dot (I, N);
	dot		___216_IdotN $tmp1 N 	%line{202} %argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:203
#     float k = 1 - eta*eta * (1 - IdotN*IdotN);
	mul		$tmp23 ior ior 	%line{203} %argrw{"wrr"}
	mul		$tmp24 ___216_IdotN ___216_IdotN 	%argrw{"wrr"}
	sub		$tmp25 $const6 $tmp24 	%argrw{"wrr"}
	mul		$tmp26 $tmp23 $tmp25 	%argrw{"wrr"}
	sub		___216_k $const6 $tmp26 	%argrw{"wrr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:204
#     return (k < 0) ? vector(0,0,0) : (eta*I - N * (eta*IdotN + sqrt(k)));
	lt		$tmp27 ___216_k $const2 	%line{204} %argrw{"wrr"}
	if		$tmp27 51 57 	%argrw{"r"}
	assign		___221_T $const12 	%argrw{"wr"}
	mul		$tmp28 ior $tmp1 	%argrw{"wrr"}
	mul		$tmp29 ior ___216_IdotN 	%argrw{"wrr"}
	sqrt		$tmp30 ___216_k 	%argrw{"wr"}
	add		$tmp31 $tmp29 $tmp30 	%argrw{"wrr"}
	mul		$tmp32 N $tmp31 	%argrw{"wrr"}
	sub		___221_T $tmp28 $tmp32 	%argrw{"wrr"}
	return
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:229
#         Kr = 1.0;
	assign		Kr $const6 	%line{229} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:230
#         Kt = 0.0;
	assign		Kt $const8 	%line{230} %argrw{"wr"}
# /home/est/Devel/appleseedhq/appleseed/sandbox/shaders/stdosl.h:231
#         T = vector (0,0,0);
	assign		___221_T $const12 	%line{231} %argrw{"wr"}
# fresnel_test.osl:6
# 	Ci = color(Kr, 0, 0) * diffuse(N);
	closure		$tmp33 $const13 N 	%filename{"fresnel_test.osl"} %line{6} %argrw{"wrr"}
	color		$tmp34 Kr $const8 $const8 	%argrw{"wrrr"}
	mul		Ci $tmp33 $tmp34 	%argrw{"wrr"}
	end
