OpenShadingLanguage 1.00
# Compiled by oslc 1.5.5dev
surface raytypes_test
global	normal	N	 %read{2,28} %write{2147483647,-1}
global	closure color	Ci	 %read{2147483647,-1} %write{3,29}
temp	int	$tmp1	 %read{1,1} %write{0,0}
const	string	$const1	"camera"		 %read{0,0} %write{2147483647,-1}
temp	closure color	$tmp2	 %read{3,3} %write{2,2}
const	string	$const2	"diffuse"		 %read{2,28} %write{2147483647,-1}
const	color	$const3	1 0.5 0		 %read{3,3} %write{2147483647,-1}
temp	int	$tmp4	 %read{5,5} %write{4,4}
const	string	$const4	"light"		 %read{4,4} %write{2147483647,-1}
temp	closure color	$tmp5	 %read{7,7} %write{6,6}
const	color	$const5	0 0.5 1		 %read{7,7} %write{2147483647,-1}
temp	int	$tmp7	 %read{9,9} %write{8,8}
const	string	$const6	"shadow"		 %read{8,8} %write{2147483647,-1}
temp	closure color	$tmp8	 %read{11,11} %write{10,10}
const	string	$const7	"transparent"		 %read{10,10} %write{2147483647,-1}
const	float	$const8	0.5		 %read{11,11} %write{2147483647,-1}
temp	int	$tmp9	 %read{13,13} %write{12,12}
const	string	$const9	"probe"		 %read{12,12} %write{2147483647,-1}
temp	closure color	$tmp10	 %read{15,15} %write{14,14}
const	color	$const10	0 1 0		 %read{15,15} %write{2147483647,-1}
temp	int	$tmp12	 %read{17,17} %write{16,16}
temp	closure color	$tmp13	 %read{19,19} %write{18,18}
const	color	$const11	1 0 0		 %read{19,19} %write{2147483647,-1}
temp	int	$tmp15	 %read{21,21} %write{20,20}
const	string	$const12	"glossy"		 %read{20,20} %write{2147483647,-1}
temp	closure color	$tmp16	 %read{23,23} %write{22,22}
const	color	$const13	1 1 0		 %read{23,23} %write{2147483647,-1}
temp	int	$tmp18	 %read{25,25} %write{24,24}
const	string	$const14	"specular"		 %read{24,24} %write{2147483647,-1}
temp	closure color	$tmp19	 %read{27,27} %write{26,26}
const	color	$const15	0 0 1		 %read{27,27} %write{2147483647,-1}
temp	closure color	$tmp21	 %read{29,29} %write{28,28}
const	color	$const16	0.69999999 0.69999999 0.69999999		 %read{29,29} %write{2147483647,-1}
code ___main___
# raytypes_test.osl:4
# 	if (raytype("camera")) // ratype == 1
	raytype		$tmp1 $const1 	%filename{"raytypes_test.osl"} %line{4} %argrw{"wr"}
	if		$tmp1 4 30 	%argrw{"r"}
# raytypes_test.osl:5
# 		Ci = color( 1.0, 0.5, 0.0) * diffuse(N);
	closure		$tmp2 $const2 N 	%line{5} %argrw{"wrr"}
	mul		Ci $tmp2 $const3 	%argrw{"wrr"}
# raytypes_test.osl:6
# 	else if (raytype("light")) // raytype == 2
	raytype		$tmp4 $const4 	%line{6} %argrw{"wr"}
	if		$tmp4 8 30 	%argrw{"r"}
# raytypes_test.osl:7
# 		Ci = color( 0.0, 0.5, 1.0) * diffuse(N);
	closure		$tmp5 $const2 N 	%line{7} %argrw{"wrr"}
	mul		Ci $tmp5 $const5 	%argrw{"wrr"}
# raytypes_test.osl:8
# 	else if (raytype("shadow"))
	raytype		$tmp7 $const6 	%line{8} %argrw{"wr"}
	if		$tmp7 12 30 	%argrw{"r"}
# raytypes_test.osl:9
# 		Ci = 0.5 * transparent();
	closure		$tmp8 $const7 	%line{9} %argrw{"wr"}
	mul		Ci $tmp8 $const8 	%argrw{"wrr"}
# raytypes_test.osl:10
# 	else if (raytype("probe"))
	raytype		$tmp9 $const9 	%line{10} %argrw{"wr"}
	if		$tmp9 16 30 	%argrw{"r"}
# raytypes_test.osl:11
# 		Ci = color( 0.0, 1.0, 0.0) * diffuse(N);
	closure		$tmp10 $const2 N 	%line{11} %argrw{"wrr"}
	mul		Ci $tmp10 $const10 	%argrw{"wrr"}
# raytypes_test.osl:12
# 	else if (raytype("diffuse"))
	raytype		$tmp12 $const2 	%line{12} %argrw{"wr"}
	if		$tmp12 20 30 	%argrw{"r"}
# raytypes_test.osl:13
# 		Ci = color( 1.0, 0.0, 0.0) * diffuse(N);
	closure		$tmp13 $const2 N 	%line{13} %argrw{"wrr"}
	mul		Ci $tmp13 $const11 	%argrw{"wrr"}
# raytypes_test.osl:14
# 	else if (raytype("glossy"))
	raytype		$tmp15 $const12 	%line{14} %argrw{"wr"}
	if		$tmp15 24 30 	%argrw{"r"}
# raytypes_test.osl:15
# 		Ci = color( 1.0, 1.0, 0.0) * diffuse(N);
	closure		$tmp16 $const2 N 	%line{15} %argrw{"wrr"}
	mul		Ci $tmp16 $const13 	%argrw{"wrr"}
# raytypes_test.osl:16
# 	else if (raytype("specular"))
	raytype		$tmp18 $const14 	%line{16} %argrw{"wr"}
	if		$tmp18 28 30 	%argrw{"r"}
# raytypes_test.osl:17
# 		Ci = color( 0.0, 0.0, 1.0) * diffuse(N);
	closure		$tmp19 $const2 N 	%line{17} %argrw{"wrr"}
	mul		Ci $tmp19 $const15 	%argrw{"wrr"}
# raytypes_test.osl:19
# 		Ci = color( 0.7, 0.7, 0.7) * diffuse(N);
	closure		$tmp21 $const2 N 	%line{19} %argrw{"wrr"}
	mul		Ci $tmp21 $const16 	%argrw{"wrr"}
	end
