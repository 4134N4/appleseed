
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

//
// Reference:
//
//     Bump Mapping Unparametrized Surfaces on the GPU
//     Morten S. Mikkelsen
//     https://dl.dropbox.com/u/55891920/papers/mm_sfgrad_bump.pdf
//

shader as_bump_map
(
    vector        Position = P,
    vector        Normal = N,
    vector        Tn = 0
    [[
        string help = "Tangent",
        string label = "Tangent",    
        int    lockgeom = 0
    ]],
    float         Height = 0,
    float         Amount = 1
    [[
        float  min = 0
    ]],
    output vector NormalOut = Normal
)
{
    int has_diffs;
    int get_attr_ok = getattribute("path:ray_has_differentials", has_diffs);

    // dPdx and dPdy are not allways defined.
    if (get_attr_ok && has_diffs)
    {
        vector n = normalize(Normal);
        vector dpdx = Dx(Position);
        vector dpdy = Dy(Position);

        vector rx = cross(dpdy, n);
        vector ry = cross(n, dpdx);

        float dhx = Dx(Height) * Amount;
        float dhy = Dy(Height) * Amount;

        float det = dot(dpdx, rx);

        vector surf_grad = sign(det) * (dhx * rx + dhy * ry);
        NormalOut = normalize(abs(det) * n - surf_grad);
    }

    if (dot(Normal, NormalOut) < 0.0)
        NormalOut = -NormalOut;
}
