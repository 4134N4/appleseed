
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/math/as_math_helpers.h"

shader as_triplanar
[[
    string as_maya_node_name = "asTriPlanar",
    string as_maya_classification = "drawdb/shader:rendernode/appleseed/utility",
    string help = "Tri-planar projection node.",
    string icon = "asTriPlanar.png",
    int as_maya_type_id = 0x001279e5
]]
(
    string in_filename = ""
    [[
        string as_maya_attribute_name = "filename",
        string as_maya_attribute_short_name = "fil",
        string widget = "filename",
        string label = "File",
        string page = "Color",
        int divider = 1
    ]],
    float in_blending_amount = 0.1
    [[
        string as_maya_attribute_name = "blendingAmount",
        string as_maya_attribute_short_name = "bam",
        float min = 0.0,
        float max = 1.0,
        string label = "Blend Amount",
        string page = "Color"
    ]],
    int in_space = 0
    [[
        string as_maya_attribute_name = "space",
        string as_maya_attribute_short_name = "spa",
        string widget = "mapper",
        string options = "Object Space:0|World Space:1",
        string label = "Coordinate Space",
        string page = "Surface",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1,
        int gafferNoduleLayoutVisible = 0,
        int divider = 1
    ]],
    point in_point = P
    [[
        string as_maya_attribute_name = "point",
        string as_maya_attribute_short_name = "p",
        string label = "Surface Point",
        string page = "Surface"
    ]],
    normal in_normal = N
    [[
        string as_maya_attribute_name = "normalCamera",
        string as_maya_attribute_short_name = "n",
        string label = "Surface Normal",
        string page = "Surface"
    ]],
    vector in_scale = vector(1)
    [[
        string as_maya_attribute_name = "scale",
        string as_maya_attribute_short_name = "ssc",
        string label = "Scale",
        string page = "Transform"
    ]],
    vector in_rotation = vector(0)
    [[
        string as_maya_attribute_name = "rotation",
        string as_maya_attribute_short_name = "rot",
        string label = "Rotation",
        string page = "Transform"
    ]],
    vector in_translation = vector(0)
    [[
        string as_maya_attribute_name = "translation",
        string as_maya_attribute_short_name = "tra",
        string label = "Translation",
        string page = "Transform"
    ]],

    output color out_color = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc",
        string label = "Output Color"
    ]]
)
{
    if (in_filename == "")
    {
        return;
    }

    string coordspace = (in_space == 0) ? "object" : "world";

    normal Nn = normalize(N);
    normal xform_N = normalize(transform(coordspace, Nn)) * in_scale;
    point xform_P = transform(coordspace, in_point) * in_scale;

    vector blending = normalize(max(EPS, abs(xform_N)));
    //blending = pow(blending, in_blending_amount * 64);
    //blending /= dot(blending, vector(1));

    
    float b = blending[0] + blending[1] + blending[2];
    blending /= vector(b);

    blending = pow(abs(xform_N), in_blending_amount * 16.0);
    blending = blending / (blending[0] + blending[1] + blending[2]);

    // xform * scale, xformed P
    //

    // NOTE: do the lookup only if blending > 0, alternatively try a cubemap
    
    color x_axis = texture(in_filename, xform_P[1], xform_P[2],
        "wrap", "periodic");
    color y_axis = texture(in_filename, xform_P[0], xform_P[2],
        "wrap", "periodic");
    color z_axis = texture(in_filename, xform_P[0], xform_P[1],
        "wrap", "periodic");

    out_color = color(
        x_axis * blending[0] +
        y_axis * blending[1] +
        z_axis * blending[2]);
}
