
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/material/as_material_helpers.h"
#include "appleseed/maya/as_maya_helpers.h"

shader as_plastic
[[
    string maya_node_name = "AsPlastic",
    string maya_classification = "shader/surface:appleseed/surface:swatch/AppleseedRenderSwatch",
    int maya_type_id = 1210819
]]
(
    color surface_color = color(0, 0.26, 0.7)
    [[
        string label = "Surface Color",
        string page = "Common Material Attributes",
        string maya_attribute_name = "color",
        string maya_attribute_short_name = "c",
        int divider = 1
    ]],
    color sss_radius = 1.0
    [[
        string label = "SSS Radius",
        string page = "Common Material Attributes"
    ]],
    float sss_radius_scale = 0.1
    [[
        string label = "SSS Radius Scale",
        string widget = "slider",
        float min = 0.001,
        float max = 100.0,
        float slidermin = 0.001,
        float slidermax = 100.0,
        int digits = 5,
        string page = "Common Material Attributes"
    ]],
    int sss_ray_depth = 2
    [[
        string label = "Subsurface Ray Depth",
        string widget = "slider",
        int min = 0,
        int max = 10,
        int slidermin = 0,
        int slidermax = 10,
        string page = "Common Material Attributes"
    ]],  
    string sss_profile = "better_dipole"
    [[
        string label = "Subsurface Profile",
        string widget = "popup",
        string options = "normalized_diffusion|standard_dipole|better_dipole|directional_dipole",
        string page = "Common Material Attributes",
        int divider = 1
    ]],
    int ior_mode = 0
    [[
        string label = "IOR Mode",
        string widget = "mapper",
        string options = "Reflectance:0|Index of Refraction:1",
        string help = "Reflectance at normal incidence used to calculate the index of refraction, or explicitly set the index of refraction.",
        string page = "Common Material Attributes"
    ]],
    float reflectance = 0.1
    [[
        string label = "Surface Reflectance",
        string widget = "slider",
        float min = 0.0,
        float max = 1.0,
        float slidermin = 0.0,
        float slidermax = 1.0,
        float slidercenter = 0.1,
        float sliderexponent = 2,
        int digits = 5,
        string help = "Reflectance at normal incidence, used to derive the index of refraction for the subsurface and the specular terms.",
        string page = "Common Material Attributes"
    ]],
    float ior = 1.37
    [[
        string label = "Index Of Refraction",
        float min = 1.0,
        float max = 5.0,
        float slidermin = 1.0,
        float slidermax = 3.0,
        string help = "Absolute index of refraction",
        string page = "Common Material Attributes",
        int divider = 1
    ]],
    float specular_intensity = 1.0
    [[
        string label = "Specular Intensity",
        string help = "Specular intensity modulating factor, a scalar not a color since dielectric specular highlights are white.",
        float min = 0.0,
        float max = 1.0,
        string page = "Common Material Attributes"
    ]],
    float specular_roughness = 0.2
    [[
        string label = "Specular Roughness",
        string widget = "slider",
        float min = 0.0,
        float max = 1.0,
        float slidermin = 0.0,
        float slidermax = 1.0,
        float slidercenter = 0.1,
        float sliderexponent = 2.0,
        int digits = 5,
        string page = "Common Material Attributes"
    ]],
    float specular_roughness_depth_scale = 1.0
    [[
        string label = "Roughness Depth Scale",
        float min = 1.0,
        float max = 10.0,
        float slidermin = 1.0,
        float slidermax = 10.0,
        int digits = 5,
        string page = "Common Material Attributes",
        int divider = 1
    ]],
    int specular_ray_depth = 4
    [[
        string label = "Specular Ray Depth",
        string widget = "slider",
        int min = 0,
        int max = 10,
        int slidermin = 0,
        int slidermax = 10,
        string page = "Common Material Attributes"
    ]],
    normal surface_normal = N
    [[
        string label = "Map",
        string page = "Bump/Normal Mapping",
        string maya_attribute_name = "normalCamera",
        string maya_attribute_short_name = "n"
    ]],
    float matte_opacity = 1.0
    [[
        string label = "Matte Opacity",
        string page = "Matte Opacity"
    ]],
    output closure color output_color = 0
    [[
        string label = "Output Color",
        string widget = "null",
        string maya_attribute_name = "outColor",
        string maya_attribute_short_name = "oc"
    ]],
    output closure color output_matte_opacity = 0
    [[
        string label = "Output Matte Opacity",
        string widget = "null"
    ]]
)
{
    if (surface_color || specular_intensity)
    {
        closure color subsurface_term = 0;
        closure color specular_term = 0;

        float real_ior = (ior_mode)
            ? ior
            : ior_from_normal_reflectance(reflectance);
            
        if (surface_color)
        {
            int ray_depth = 0;

            getattribute("path:ray_depth", ray_depth);

            if (ray_depth <= sss_ray_depth && sss_radius)
            {
                subsurface_term = as_subsurface(
                    sss_profile,
                    surface_normal,
                    surface_color,
                    sss_radius * sss_radius_scale,
                    real_ior);
            }
            else
            {
                float Kr = 0, Kt;

                fresnel(I, surface_normal, 1/real_ior, Kr, Kt);

                subsurface_term = (1 - Kr) * surface_color *
                    oren_nayar(surface_normal, specular_roughness);
            }
        }

        if (specular_intensity && real_ior > 1.0)
        {
            int ray_depth = 0;

            getattribute("path:ray_depth", ray_depth);

            if (ray_depth <= specular_ray_depth)
            {
                specular_term = as_glossy(
                    "ggx",
                    surface_normal,
                    microfacet_roughness(
                        specular_roughness,
                        specular_roughness_depth_scale),
                    real_ior);
            }
        }

        output_matte_opacity = matte_opacity * holdout();

        output_color = subsurface_term +
            specular_term + output_matte_opacity;
    }
}
