
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/color/as_color_transforms.h"
#include "appleseed/maya/as_maya_helpers.h"

shader asColorTransform
[[
    string as_maya_node_name = "asColorTransform",
    string as_maya_classification = "drawdb/shader:rendernode/appleseed/utility:swatch/AppleseedRenderSwatch",
    string help = "Transforms a color to another color model. Input color MUST be linearized.",
    int as_maya_type_id = 1210824
]]
(
    color in_color = color(0.5)
    [[
        string as_maya_attribute_name = "color",
        string as_maya_attribute_short_name = "c",
        string label = "Input Color",
        string page = "Color Attributes",
        int divider = 1
    ]],

    int in_inputSpace = 0
    [[
        string as_maya_attribute_name = "inputSpace",
        string as_maya_attribute_short_name = "is",
        int as_maya_attribute_keyable = 0,
        string widget = "mapper",
        string options =
        "RGB:0|HSV:1|HSL:2|YIQ:3|XYZ:4|xyY:5|CIE L*a*b*:6|CIE L*u*v*:7|LCHab:8|LCHuv:9|UVW:10|UCS:11|YUV:12",
        string label = "Input Space",
        string page = "Color Attributes"
    ]],
    int in_outputSpace = 0
    [[
        string as_maya_attribute_name = "outputSpace",
        string as_maya_attribute_short_name = "os",
        int as_maya_attribute_keyable = 0,
        string widget = "mapper",
        string options =
        "RGB:0|HSV:1|HSL:2|YIQ:3|XYZ:4|xyY:5|CIE L*a*b*:6|CIE L*u*v*:7|LCHab:8|LCHuv:9|UVW:10|UCS:11|YUV:12",
        string label = "Output Space",
        string page = "Color Attributes"
    ]],

    MAYA_COLORMANAGEMENT_PARAMETERS,
    
    output color out_outColor = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc",
        string widget = "null",
        string label = "Output Color"
    ]]
)
{
    if (in_inputSpace != in_outputSpace)
    {
        string space = "", illuminant = "";
        color XYZ = color(0);

        // Some color _models_ require knowledge of the white point xy
        // chromaticity coordinates as well as relative luminance, which 
        // is dependent on the color _space_.

        if (in_colorManagementEnabled)
        {
            space = in_colorSpace;

            if (space == "ACES" || space == "ACEScg")
            {
                illuminant = "D60";
            }
            else if (space == "DCIP3")
            {
                illuminant = "DCIP3";
            }
            else
            {
                illuminant = "D65";
            }
        }
        else
        {
            space = "Rec.709";
            illuminant = "D65";
        }

        // Transform first to an intermediary space XYZ.

        if (in_inputSpace == 0) // RGB
        {
            XYZ = transform_linear_RGB_to_XYZ(in_color, space, illuminant);
        }
        else if (in_inputSpace == 1) // HSV
        {
            color RGB = transformc("hsv", "rgb", in_color);
            XYZ = transform_linear_RGB_to_XYZ(RGB, space, illuminant);
        }
        else if (in_inputSpace == 2) // HSL
        {
            color RGB = transformc("hsl", "rgb", in_color);
            XYZ = transform_linear_RGB_to_XYZ(RGB, space, illuminant);
        }
        else if (in_inputSpace == 3) // YIQ
        {
            // This WILL require illuminant, white point, relative luminance.
            color RGB = transformc("YIQ", "rgb", in_color);
            XYZ = transform_linear_RGB_to_XYZ(RGB, space, illuminant);
        }
        else if (in_inputSpace == 4) // XYZ
        {
            XYZ = in_color;
        }
        else if (in_inputSpace == 5) // xyY
        {
            XYZ = transform_xyY_to_XYZ(in_color);
        }
        else if (in_inputSpace == 6) // Lab
        {
            XYZ = transform_Lab_to_XYZ(in_color, illuminant);
        }
        else if (in_inputSpace == 7) // Luv
        {
            XYZ = transform_Luv_to_XYZ(in_color, illuminant);
        }
        else if (in_inputSpace == 8) // LCh_ab
        {
            color Lab = transform_LCh_ab_to_Lab(in_color);
            XYZ = transform_Lab_to_XYZ(Lab, illuminant);
        }
        else if (in_inputSpace == 9) // LCh_uv
        {
            color Luv = transform_LCh_uv_to_Luv(in_color);
            XYZ = transform_Luv_to_XYZ(Luv, illuminant);
        }
        else if (in_inputSpace == 10) // UVW
        {
            ;
        }
        else if (in_inputSpace == 11) // UCS
        {
            ;
        }
        else if (in_inputSpace == 12) // YUV
        {
            
        }
        else
        {
#ifdef DEBUG
            string shadername = "";
            getattribute("shader:shadername", shadername);

            warning("Unsupported input color model value %i in %s, %s:%i\n",
                    in_inputSpace, shadername, __FILE__, __LINE__);
#endif              
        }

        // Convert from intermediary (XYZ) space to output space

        color out = color(0);
        
        if (in_outputSpace == 0) // RGB
        {
            out = transform_XYZ_to_linear_RGB(XYZ, space, illuminant);
        }
        else if (in_outputSpace == 1) // HSV
        {
            color RGB = transform_XYZ_to_linear_RGB(XYZ, space, illuminant);
            out = transformc("rgb", "hsv", RGB);
        }
        else if (in_outputSpace == 2) // HSL
        {
            color RGB = transform_XYZ_to_linear_RGB(XYZ, space, illuminant);
            out = transformc("rgb", "hsl", RGB);
        }
        else if (in_outputSpace == 3) // YIQ
        {
            color RGB = transform_XYZ_to_linear_RGB(XYZ, space, illuminant);
            out = transformc("rgb", "YIQ", RGB);
        }
        else if (in_outputSpace == 4) // XYZ
        {
            out = XYZ;
        }
        else if (in_outputSpace == 5) // xyY
        {
            out = transform_XYZ_to_xyY(XYZ, illuminant);
        }
        else if (in_outputSpace == 6) // Lab
        {
            out = transform_XYZ_to_Lab(XYZ, illuminant);
        }
        else if (in_outputSpace == 7) // Luv
        {
            out = transform_XYZ_to_Luv(XYZ, illuminant);
        }
        else if (in_outputSpace == 8) // LCh_ab
        {
            color Lab = transform_XYZ_to_Lab(XYZ, illuminant);
            out = transform_Lab_to_LCh_ab(Lab);
        }
        else if (in_outputSpace == 9) // LCh_uv
        {
            color Luv = transform_XYZ_to_Luv(XYZ, illuminant);
            out = transform_Luv_to_LCh_uv(Luv);
        }
        else if (in_outputSpace == 10) // UVW
        {
            ;
        }
        else if (in_outputSpace == 11) // UCS
        {
            ;
        }
        else if (in_outputSpace == 12) // YUV
        {
            ;
        }
        else
        {
#ifdef DEBUG
            string shadername = "";
            getattribute("shader:shadername", shadername);

            warning("Unsupported output color model value %i in %s, %s:%i\n",
                    in_outputSpace, shadername, __FILE__, __LINE__);
#endif
        }

        out_outColor = out;
    }
    else
    {
        out_outColor = in_color;
    }

    out_outColor = max(0, out_outColor);

    warning("color values = %e\n", out_outColor);
}
