
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_glass
[[
    string as_maya_node_name = "asGlass",
    string as_maya_classification = "drawdb/shader/surface:rendernode/appleseed/surface:shader/surface:swatch/AppleseedRenderSwatch",
    string help = "Glass material",
    int as_maya_type_id = 1210820
]]
(
    color in_surfaceTransmittance = color(1.0)
    [[
        string as_maya_attribute_name = "color",
        string as_maya_attribute_short_name = "c",
        string label = "Transmittance Color",
        string page = "Surface Transmittance Parameters"
    ]],
    float in_transmittanceAmount = 0.8
    [[
        string as_maya_attribute_name = "transmittanceAmount",
        string as_maya_attribute_short_name = "ta",
        float min = 0.0,
        float max = 1.0,
        string label = "Transmittance Amount",
        string page = "Surface Transmittance Parameters"
    ]],
    color in_reflectionTint = color(1)
    [[
        string as_maya_attribute_name = "reflectionTint",
        string as_maya_attribute_short_name = "rt",
        string label = "Reflection Tint",
        string page = "Specular Parameters"
    ]],
    color in_refractionTint = color(1)
    [[
        string as_maya_attribute_name = "refractionTint",
        string as_maya_attribute_short_name = "tt",
        string label = "Refraction Tint",
        string page = "Specular Parameters"
    ]],
    float in_ior = 1.5
    [[
        string as_maya_attribute_name = "ior",
        string as_maya_attribute_short_name = "io",
        float min = 1.0,
        float max = 10.0,
        float softmax = 2.0,
        string label = "Index Of Refraction",
        string page = "Specular Parameters",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_hidden = 1,
        int divider = 1
    ]],
    int in_distribution = 0
    [[
        string as_maya_attribute_name = "distribution",
        string as_maya_attribute_short_name = "dd",
        string label = "Distribution",
        string widget = "mapper",
        string options = "Beckmann:0|GGX:1",
        string page = "Specular Parameters",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1
    ]],
    float in_roughness = 0.1
    [[
        string as_maya_attribute_name = "roughness",
        string as_maya_attribute_short_name = "ro",
        float min = 0.001,
        float max = 1.0,
        string label = "Roughness",
        string page = "Specular Parameters",
        int divider = 1
    ]],
    float in_anisotropyAmount = 0.0
    [[
        string as_maya_attribute_name = "anisotropyAmount",
        string as_maya_attribute_short_name = "aa",
        float min = 0.0,
        float max = 1.0,
        string label = "Anisotropy Amount",
        string page = "Specular Parameters"
    ]],
    float in_anisotropyAngle = 0.0
    [[
        string as_maya_attribute_name = "anisotropyAngle",
        string as_maya_attribute_short_name = "an",
        float min = 0.0,
        float max = 1.0,
        string label = "Anisotropy Rotation",
        string page = "Specular Parameters",
        string help = "The [0,1] range maps to [0,360] degrees range"
    ]],
    color in_anisotropyVectorMap = color(0)
    [[
        string as_maya_attribute_name = "anisotropyVectorMap",
        string as_maya_attribute_short_name = "av",
        string label = "Anisotropy Vector Map",
        string page = "Specular Parameters",
        string help = "Vector tangent field map, with XY in R,G channels"
    ]],
    color in_volumeTransmittance = 1.0
    [[
        string as_maya_attribute_name = "volumeTransmittance",
        string as_maya_attribute_short_name = "vt",
        string label = "Volume Transmittance",
        string page = "Volume Material Parameters"
    ]],
    float in_volumeTransmittanceDistance = 0.0
    [[
        string as_maya_attribute_name = "volumeTransmittanceDistance",
        string as_maya_attribute_short_name = "vd",
        float min = 0.0,
        float max = 1e+9,
        string label = "Transmittance Distance",
        string page = "Volume Material Parameters"
    ]],
    normal in_normalCamera = N
    [[
        string as_maya_attribute_name = "normalCamera",
        string as_maya_attribute_short_name = "n",
        string label = "Bump Normal",
        string page = "Bump Parameters"
    ]],
    int in_matteOpacityMode = 2
    [[
        string as_maya_attribute_name = "matteOpacityMode",
        string as_maya_attribute_short_name = "mm",
        string label = "Matte Opacity Mode",
        string widget = "mapper",
        string options = "Black Hole:0|Solid Matte:1|Opacity Gain:2",
        string page = "Matte Opacity Parameters",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1
    ]],
    float in_matteOpacity = 1.0
    [[
        string as_maya_attribute_name = "matteOpacity",
        string as_maya_attribute_short_name = "mo",
        string widget = "slider",
        string label = "Matte Opacity",
        string page = "Matte Opacity Parameters",
        int as_maya_attribute_hidden = 1
    ]],
    int in_maximumRayDepth = 4
    [[
        string as_maya_attribute_name = "maximumRayDepth",
        string as_maya_attribute_short_name = "mr",
        int min = 0,
        int max = 32,
        int softmax = 8,
        string label = "Ray Depth",
        string page = "Advanced Parameters",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int as_maya_attribute_hidden = 1
    ]],
    vector Tn = vector(0)
    [[
        int lockgeom = 0,
        int as_maya_attribute_hidden = 1,
        string widget = "null"
    ]],
    vector Bn = vector(0)
    [[
        int lockgeom = 0,
        int as_maya_attribute_hidden = 1,
        string widget = "null"
    ]],

    output closure color out_outColor = 0
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc",
        string widget = "null"
    ]],
    output closure color out_outTransparency = 0
    [[
        string as_maya_attribute_name = "outTransparency",
        string as_maya_attribute_short_name = "ot",
        string widget = "null"
    ]],
    output closure color out_outMatteOpacity = 0
    [[
        string as_maya_attribute_name = "outMatteOpacity",
        string as_maya_attribute_short_name = "om",
        string widget = "null",
        int as_maya_attribute_hidden = 1
    ]]
)
{
    if (raytype("shadow") || raytype("transparency"))
    {
        return; // no transparency set, color default 0
    }

    int ray_depth = 0;
    int status = getattribute("path:ray_depth", ray_depth);

    if (status && ray_depth <= in_maximumRayDepth)
    {
        normal Nn = normalize(in_normalCamera);
        vector tangent;

        if (in_anisotropyAmount > 0.0)
        {
            if (isconnected(in_anisotropyVectorMap))
            {
                vector vector_map = normalize(
                    (vector) in_anisotropyVectorMap * 2.0 - 1.0);

                tangent = normalize(
                    vector_map[0] * Tn +
                    vector_map[1] * Bn +
                    vector_map[2] * Nn);
            }
            else
            {
                tangent = Tn;
            }

            if (in_anisotropyAngle > 0.0)
            {
                tangent = rotate(
                    tangent,
                    in_anisotropyAngle * M_2PI,
                    point(0),
                    point(in_normalCamera));
            }
        }

        string distribution = (in_distribution) ? "ggx" : "beckmann";

        out_outColor = as_glass(
            distribution,
            Nn,
            tangent,
            in_transmittanceAmount * in_surfaceTransmittance,
            in_reflectionTint,
            in_refractionTint,
            in_roughness,
            0.5,    // Highlight falloff.
            in_anisotropyAmount,
            in_ior,
            in_volumeTransmittance,
            in_volumeTransmittanceDistance);

        closure color matte_term;

        if (in_matteOpacityMode == 0)
        {
            matte_term = 0;
        }
        else if (in_matteOpacityMode == 1)
        {
            matte_term = holdout();
        }
        else
        {
            matte_term = in_matteOpacity * holdout();
        }

        out_outMatteOpacity = matte_term;

        out_outColor += matte_term;
    }
}
