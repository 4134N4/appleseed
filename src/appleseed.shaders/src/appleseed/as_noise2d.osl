
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/fractal/as_fractal_helpers.h"
#include "appleseed/math/as_math_helpers.h"
#include "appleseed/maya/as_maya_helpers.h"
#include "appleseed/maya/as_maya_transform_helpers.h"

shader as_noise2d
[[
    string as_maya_node_name = "asNoise2D",
    string as_maya_classification = "drawdb/shader:rendernode/appleseed/texture/2d:swatch/AppleseedRenderSwatch:texture",
    int as_maya_type_id = 0x001279cb
]]
(
    color in_color1 = color(0)
    [[
        string as_maya_attribute_name = "color",
        string as_maya_attribute_short_name = "c",
        string label = "Color 1",
        string page = "Color"
    ]],
    color in_color2 = color(1)
    [[
        string as_maya_attribute_name = "color2",
        string as_maya_attribute_short_name = "c2",
        string label = "Color 2",
        string page = "Color"
    ]],
    float in_contrast = 1.0
    [[
        string as_maya_attribute_name = "contrast",
        string as_maya_attribute_short_name = "con",
        string widget = "slider",
        float min = 0.0,
        float max = 1.0,
        string label = "Contrast",
        string page = "Color"
    ]],
    int in_type = 0
    [[
        string as_maya_attribute_name = "type",
        string as_maya_attribute_short_name = "typ",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "mapper",
        string options = "Perlin:0|Unsigned Perlin:1|Cell:2|Hash:3|Simplex:4|Unsigned Simplex:5|Gabor:6",
        string label = "Noise Type",
        string page = "Noise",
        int gafferNoduleLayoutVisible = 0
    ]],
    float in_intensity = 1.0
    [[
        string as_maya_attribute_name = "intensity",
        string as_maya_attribute_short_name = "nte",
        string widget = "slider",
        float min = 0.0,
        float softmax = 1.0,
        string label = "Intensity",
        string page = "Noise"
    ]],
    float in_frequency_x = 1.0
    [[
        string as_maya_attribute_name = "frequencyX",
        string as_maya_attribute_short_name = "frx",
        float min = 0.0,
        float softmax = 8.0,
        string label = "X Frequency",
        string page = "Noise"
    ]],
    float in_frequency_y = 1.0
    [[
        string as_maya_attribute_name = "frequencyY",
        string as_maya_attribute_short_name = "fry",
        float min = 0.0,
        float softmax = 8.0,
        string label = "Y Frequency",
        string page = "Noise"
    ]],
    int in_greyscale = 1
    [[
        string as_maya_attribute_name = "greyscale",
        string as_maya_attribute_short_name = "gre",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "checkBox",
        string label = "Greyscale",
        string page = "Noise",
        int gafferNoduleLayoutVisible = 0
    ]],
    int in_ridges = 0
    [[
        string as_maya_attribute_name = "ridges",
        string as_maya_attribute_short_name = "rid",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "checkBox",
        string label = "Ridges",
        string page = "Noise",
        int gafferNoduleLayoutVisible = 0,
        int divider = 1
    ]],
    int in_inflection = 0
    [[
        string as_maya_attribute_name = "inflection",
        string as_maya_attribute_short_name = "ifl",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "checkBox",
        string label = "Inflection",
        string page = "Noise",
        string help = "Uses the absolute value of the noise",
        int gafferNoduleLayoutVisible = 0
    ]],
    int in_animated = 0
    [[
        string as_maya_attribute_name = "animated",
        string as_maya_attribute_short_name = "ani",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "checkBox",
        string label = "Animated Noise",
        string page = "Noise",
        int gafferNoduleLayoutVisible = 0
    ]],
    float in_time_offset = 0.0
    [[
        string as_maya_attribute_name = "timeOffset",
        string as_maya_attribute_short_name = "tof",
        string widget = "number",
        float softmin = -1.0,
        float softmax = 1.0,
        string label = "Time Offset",
        string page = "Noise",
        int divider = 1
    ]], 
    int in_periodic = 0
    [[
        string as_maya_attribute_name = "periodic",
        string as_maya_attribute_short_name = "per",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "checkBox",
        string label = "Periodic",
        string page = "Noise.Periodic",
        int gafferNoduleLayoutVisible = 0
    ]],
    float in_period_x = 4.0
    [[
        string as_maya_attribute_name = "periodX",
        string as_maya_attribute_short_name = "prx",
        float min = 0.0,
        float softmax = 16.0,
        string label = "Noise Period X",
        string page = "Noise.Periodic"
    ]],
    float in_period_y = 4.0
    [[
        string as_maya_attribute_name = "periodY",
        string as_maya_attribute_short_name = "pry",
        float min = 0.0,
        float softmax = 16.0,
        string label = "Noise Period Y",
        string page = "Noise.Periodic"
    ]],

    int in_anisotropy = 0
    [[
        string as_maya_attribute_name = "anisotropy",
        string as_maya_attribute_short_name = "any",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "mapper",
        string options = "Isotropic:0|Anisotropic:1|Hybrid:2",
        string label = "Anisotropy Mode",
        string page = "Noise.Gabor",
        int gafferNoduleLayoutVisible = 0
    ]],
    vector in_direction = vector(1,0,0)
    [[
        string as_maya_attribute_name = "direction",
        string as_maya_attribute_short_name = "dir",
        string label = "Anisotropy Vector",
        string page = "Noise.Gabor"
    ]],
    float in_bandwidth = 1.0
    [[
        string as_maya_attribute_name = "bandwidth",
        string as_maya_attribute_short_name = "bnd",
        float min = 0.0,
        float softmax = 1.0,
        string label = "Bandwidth",
        string page = "Noise.Gabor"
    ]],
    int in_impulses = 16
    [[
        string as_maya_attribute_name = "impulses",
        string as_maya_attribute_short_name = "imp",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        int min = 0,
        int softmax = 64,
        string label = "Impulses",
        string page = "Noise.Gabor",
        int gafferNoduleLayoutVisible = 0
    ]],
    int in_filter_noise = 1
    [[
        string as_maya_attribute_name = "filterNoise",
        string as_maya_attribute_short_name = "fil",
        int as_maya_attribute_connectable = 0,
        int as_maya_attribute_keyable = 0,
        string widget = "checkBox",
        string label = "Filter Noise",
        string page = "Noise.Gabor",
        int gafferNoduleLayoutVisible = 0
    ]],  
    float in_amplitude = 1.0
    [[
        string as_maya_attribute_name = "amplitude",
        string as_maya_attribute_short_name = "amp",
        string widget = "slider",
        float min = -10.0,
        float max = 10.0,
        float softmin = 0.0,
        float softmax = 1.0,
        string label = "Amplitude",
        string page = "Recursion",
        string help = "Initial amplitude before recursion"
    ]],
    int in_octaves = 1
    [[
        string as_maya_attribute_name = "octaves",
        string as_maya_attribute_short_name = "oct",
        int as_maya_attribute_connectable = 0,
        string widget = "slider",
        int min = 1,
        int max = 16,
        int softmax = 8,
        string label = "Octaves",
        string page = "Recursion",
        string help = "Maximum number of iterations"
    ]],
    float in_lacunarity = 2.17
    [[
        string as_maya_attribute_name = "lacunarity",
        string as_maya_attribute_short_name = "lac",
        int as_maya_attribute_connectable = 0,
        string widget = "slider",
        float min = 0.01,
        float max = 100.0,
        float softmin = 0.1,
        float softmax = 10.0,
        string label = "Lacunarity",
        string page = "Recursion",
        string help = "Gap between successive frequencies"
    ]],
    float in_offset = 0.0
    [[
        string as_maya_attribute_name = "offset",
        string as_maya_attribute_short_name = "oft",
        string widget = "slider",
        float min = 0.0,
        float softmax = 1.0,
        string label = "Offset",
        string page = "Recursion",
        string help = "Controls the multifractality"
    ]],
    float in_noise_gain = 1.0
    [[
        string as_maya_attribute_name = "noiseGain",
        string as_maya_attribute_short_name = "gin",
        string widget = "slider",
        float min = 0.0,
        float max = 5.0,
        float softmin = 1.0,
        float softmax = 3.0,
        string label = "Gain",
        string page = "Recursion",
        string help = "Controls the contrast of the fractal"
    ]],
    float in_distortion = 0.0
    [[
        string as_maya_attribute_name = "distortion",
        string as_maya_attribute_short_name = "dis",
        float min = 0.0,
        float softmax = 1.0,
        string label = "Coordinates Distortion",
        string page = "Recursion",
        string help = "What Ken Musgrave calls 'variable lacunarity'",
        int divider = 1
    ]],

    MAYA_COLORBALANCE_PARAMETERS,
    MAYA_EFFECTS_PARAMETERS,
    MAYA_UV_PARAMETERS,

    output color out_outColor = color(0)
    [[
        string as_maya_attribute_name = "outColor",
        string as_maya_attribute_short_name = "oc"
    ]],
    output float out_outAlpha = 1.0
    [[
        string as_maya_attribute_name = "outAlpha",
        string as_maya_attribute_short_name = "oa",
        string label = "Output Alpha"
    ]],
)
{
    if (in_uvCoord[0] == OUTSIDE_UVFRAME || in_uvCoord[1] == OUTSIDE_UVFRAME)
    {
        out_outColor = in_defaultColor;
        out_outAlpha = maya_luminance(in_defaultColor);
        return;
    }

    if (in_amplitude < EPS)
    {
        out_outColor = color(0);
        out_outAlpha = 1.0 - 0.5 * in_contrast;
        return;
    }

    float st[2] = {in_uvCoord[0], in_uvCoord[1]};

    st[0] = mod(st[0], UVWRAP);
    st[1] = mod(st[1], UVWRAP);

    st[0] *= in_frequency_x;
    st[1] *= in_frequency_y;

    float dsdt[2] = {
        in_filter *
            (in_uvFilterSize[0] == UNDEFINED_UVFILTER
                ? filterwidth(st[0])
                : in_uvFilterSize[0]) + 2.0 * in_filterOffset,
        in_filter *
            (in_uvFilterSize[1] == UNDEFINED_UVFILTER
                ? filterwidth(st[1])
                : in_uvFilterSize[1]) + 2.0 * in_filterOffset};

    float filter_width = max(dsdt[0], dsdt[1]);
    float current_time = (in_animated) ? time + in_time_offset : 0.0;

    warning("[DEBUG]: TIME = %3.3f\n", time);

    float lacunarity = in_lacunarity, noise_gain = in_noise_gain;
    float amplitude = in_amplitude;

    float new_st[2] = {st[0], st[1]}, distortion[2] = {0.0, 0.0};

    string noisetype = get_noise_type(in_type);

    color out_color = color(0), weight = color(1);
    
#ifdef DEBUG
    warning("[DEBUG]: Filter Width = %.3f\n", filter_width);
#endif

    for (int i = 0; i < in_octaves; ++i)
    {
        if (amplitude == 0.0)
        {
            break;
        }

        if (in_distortion > 0.0)
        {
            vector voffset = in_distortion * (vector) noise(
                "uperlin",
                new_st[0],
                new_st[1]);

            distortion[0] = voffset[0];
            distortion[1] = voffset[1];
        }

        point coords = point(
            new_st[0] + distortion[1],
            new_st[1] + distortion[1],
            current_time);

        color signal;

        if (in_greyscale)
        {
            if (noisetype == "gabor")
            {
                signal = (float) noise(
                    noisetype,
                    coords,
                    "anisotropic", in_anisotropy,
                    "direction", in_direction,
                    "bandwidth", in_bandwidth,
                    "impulses", in_impulses,
                    "do_filter", in_filter_noise);
            }
            else if (noisetype == "voronoise")
            {
                //signal = voronoise(new_st, x, y);
            }
            else if (in_periodic)
            {
                signal = (float) pnoise(
                    noisetype,
                    coords,
                    point(in_period_x, in_period_y, 1.0));
            }
            else
            {
                signal = (float) noise(noisetype, coords);
            }
        }
        else
        {
            if (noisetype == "gabor")
            {
                signal = (color) noise(
                    noisetype,
                    coords,
                    "anisotropic", in_anisotropy,
                    "direction", in_direction,
                    "bandwidth", in_bandwidth,
                    "impulses", in_impulses,
                    "do_filter", in_filter_noise);
            }
            else if (noisetype == "voronoise")
            {
                //signal = voronoise(new_st, x, y);
            }
            else if (in_periodic)
            {
                signal = (color) pnoise(
                    noisetype,
                    coords,
                    point(in_period_x, in_period_y, 1.0));
            }
            else
            {
                signal = (color) noise(noisetype, coords);
            }
        }
        
        if (in_inflection)
        {
            signal = abs(signal);
        }

        if (in_ridges)
        {
            signal = in_offset - signal;
            signal *= signal;
            signal *= weight;
            weight = clamp(signal * 2.0, 0.0, 1.0);
        }

        out_color += amplitude * signal;

        amplitude *= noise_gain;
        new_st[0] *= lacunarity;
        new_st[1] *= lacunarity;

        filter_width *= lacunarity;
    }
    out_color *= in_intensity;

    out_outAlpha = luminance(out_color);

    color color_blend = mix(in_color2, in_color1, in_contrast);
    out_outColor = mix(in_color2, color_blend, 1.0 - out_color);

    maya_colorBalance(
        in_colorGain,
        in_colorOffset,
        in_defaultColor,
        in_alphaGain,
        in_alphaOffset,
        in_invert,
        in_alphaIsLuminance,
        out_outColor,
        out_outAlpha);
}
