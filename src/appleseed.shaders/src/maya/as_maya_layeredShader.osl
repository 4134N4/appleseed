
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

// Ref: $MAYA_LOCATION/docs/Nodes/layeredShader.html

shader as_maya_layeredShader
[[
    string maya_node_name = "layeredShader",
    string maya_classification = "shader/surface"
]]
(
    int in_compositingFlag = 0
    [[
        string maya_attribute_name = "compositingFlag",
        string maya_attribute_type = "enum",
        string label = "Compositing Flag",
        string widget = "mapper",
        string options = "Layer Shaders:0|Layer Textures:1"
    ]],
    closure color in_color[] = {0}
    [[
        string maya_attribute_name = "inputs",
        string maya_attribute_type = "color[]",
        string label = "Color"
    ]],
    float in_transparency[] = {0}
    [[
        string maya_attribute_name = "inputs",
        string maya_attribute_type = "float[]",
        string label = "Transparency"
    ]],
    color in_glowColor[] = {0}
    [[
        string maya_attribute_name = "inputs",
        string maya_attribute_type = "color[]",
        string label = "Glow Color",
        string widget = "null"
    ]],
    float in_matteOpacity = 1.0
    [[
        string maya_attribute_name = "matteOpacity",
        string maya_attribute_type = "float",
        string label = "Matte Opacity"
    ]],
    int in_matteOpacityMode = 2
    [[
        string maya_attribute_name = "matteOpacityMode",
        string maya_attribute_type = "enum",
        string label = "Matte Opacity Mode",
        string widget = "mapper",
        string options = "Black Hole:0|Solid Matte:1|Opacity Gain:2"
    ]],

    output closure color out_outColor = 0
    [[
        string maya_attribute_name = "outColor",
        string maya_attribute_type = "vector",
        string label = "Output Color",
        string widget = "null"
    ]],
    output color out_outGlowColor = color(0)
    [[
        string maya_attribute_name = "outGlowColor",
        string maya_attribute_type = "vector",
        string label = "Output Glow Color",
        string widget = "null"
    ]],
    output closure color out_outMatteOpacity = 0
    [[
        string maya_attribute_name = "outMatteOpacity",
        string maya_attribute_type = "vector",
        string label = "Output Matte Opacity",
        string widget = "null"
    ]],
    output color out_outTransparency = color(0)
    [[
        string maya_attribute_name = "outTransparency",
        string maya_attribute_type = "vector",
        string label = "Output Transparency",
        string widget = "null"
    ]]
)
{
    out_outColor = in_color[0];
    out_outGlowColor = in_glowColor[0]; // unsupported for now
    out_outTransparency = in_transparency[0];

    int num_colors = arraylength(in_color);

    if (num_colors > 1)
    {
        if (in_compositingFlag == 0)
        {
            // "Textures" mode

            for (int i = 0; i < num_colors; ++i)
            {
                out_outColor += out_outTransparency * in_color[i];
                out_outGlowColor += out_outTransparency * in_glowColor[i];
                out_outTransparency *= in_transparency[i];
            }
        }
        else
        {
            // "Shaders" mode (plenty of guesswork here)

            for (int i = 0; i < num_colors; ++i)
            {
                color layer_opacity =
                    out_outTransparency * (1.0 - in_transparency[i]);

                color main_opacity = 1.0 - out_outTransparency;

                out_outColor *
                    main_opacity + layer_opacity * in_color[i];
                out_outGlowColor *=
                    main_opacity + layer_opacity * in_glowColor[i];

                out_outTransparency *= in_transparency[i];
            }
        }
    }

    if (in_matteOpacityMode == 0)
    {
        out_outMatteOpacity = 0;
    }
    else if (in_matteOpacityMode == 1)
    {
        out_outMatteOpacity = holdout();
        out_outColor += out_outMatteOpacity;
    }
    else
    {
        out_outMatteOpacity = in_matteOpacity * holdout();
        out_outColor += out_outMatteOpacity;
    }
}
