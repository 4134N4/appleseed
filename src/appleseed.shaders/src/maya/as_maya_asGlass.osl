
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader as_Glass
[[
    int maya_type_id = 1210826
    string maya_node_name = "AsGlass",
    string maya_classification = "shader/surface:Appleseed/surface:swatch/AppleseedRenderSwatch",
    string help = "Glass material"
]]
(
    color in_surfaceTransmittance = color(1.0)
    [[
        string maya_attribute_name = "color",
        string maya_attribute_short_name = "c",
        string label = "Transmittance Color",
        string page = "Surface Material Attributes"
    ]],
    float in_transmittanceAmount = 0.8
    [[
        float min = 0.0,
        float max = 100.0,
        float softmin = 0.0,
        float softmax = 1.0,
        string label = "Transmittance Amount",
        string page = "Surface Material Attributes",
        int divider = 1
    ]],
    color in_reflectionTint = color(1)
    [[
        string label = "Reflection Tint",
        string page = "Surface Material Attributes"
    ]],
    color in_refractionTint = color(1)
    [[
        string label = "Refraction Tint",
        string page = "Surface Material Attributes"
    ]],
    float in_ior = 1.5
    [[
        float min = 1.0,
        float max = 10.0,
        float softmin = 1.0,
        float softmax = 2.0,
        string label = "Index Of Refraction",
        string page = "Surface Material Attributes",
        int divider = 1
    ]],
    int in_distribution = 0
    [[
        string label = "Distribution",
        string maya_attribute_type = "enum",
        int min = 0,
        int max = 1,
        string widget = "mapper",
        string options = "Beckmann:0|GGX:1",
        string page = "Surface Material Attributes"
    ]],
    float in_roughness = 0.1
    [[
        float min = 0.001,
        float max = 1.0,
        string label = "Roughness",
        string page = "Surface Material Attributes",
        int divider = 1
    ]],
    float in_anisotropy = 0.0
    [[
        float min = -1.0
        float max = 1.0,
        string label = "Anisotropy",
        string help = "With -1 being anisotropy on the U axis, 1.0 on V axis",
        string page = "Surface Material Attributes"
    ]],
    float in_anisotropyRotation = 0.0
    [[
        float min = 0.0,
        float max = 1.0,
        string label = "Anisotropy Rotation",
        string help = "The [0,1] range mapping to [0,360] degrees range",
        string page = "Surface Material Attributes",
        int divider = 1
    ]],
    float in_cutoutMask = 0.0
    [[
        float min = 0.0,
        float max = 1.0,
        string label = "Cutout Mask",
        string help = "Only 0 (transparent) or 1 (opaque) allowed",
        string page = "Mask"
    ]],
    vector Tn = vector(0)
    [[
        int lockgeom = 0,
        string widget = "null"
    ]],
    color in_volumeTransmittance = 1.0
    [[
        string label = "Volume Transmittance",
        string page = "Volume Material Attributes"
    ]],
    float in_volumeTransmittanceDistance = 0.0
    [[
        string label = "Transmittance Distance",
        string page = "Volume Material Attributes"
    ]],
    normal in_normalCamera = N
    [[
        string maya_attribute_name = "normalCamera",
        string maya_attribute_type = "vector",
        string maya_attribute_short_name = "n",
        string label = "Bump Normal",
        string page = "Bump"
    ]],
    int in_matteOpacityMode = 2
    [[
        string maya_attribute_name = "matteOpacityMode",
        string maya_attribute_type = "enum",
        string label = "Matte Opacity Mode",
        string widget = "mapper",
        string options = "Black Hole:0|Solid Matte:1|Opacity Gain:2",
        string page = "Matte Opacity"
    ]],
    float in_matteOpacity = 1.0
    [[
        string maya_attribute_name = "matteOpacity",
        string maya_attribute_type = "float",
        string label = "Matte Opacity",
        string page = "Matte Opacity"
    ]],
    int in_maximumRayDepth = 4
    [[
        int min = 0,
        int max = 32,
        int softmin = 0,
        int softmax = 8,
        string label = "Ray Depth",
        string page = "Advanced"
    ]],

    output closure color out_outColor = 0
    [[
        string maya_attribute_name = "outColor",
        string maya_attribute_type = "color",
        string maya_attribute_short_name = "oc",
        string widget = "null"
    ]],
    output closure color out_outTransparency = 0
    [[
        string maya_attribute_name = "outTransparency",
        string maya_attribute_type = "color",
        string maya_attribute_short_name = "ot",
        string widget = "null"
    ]],
    output closure color out_outMatteOpacity = 0
    [[
        string maya_attribute_name = "outMatteOpacity",
        string maya_attribute_type = "color",
        string maya_attribute_short_name = "om",
        string widget = "null"
    ]]
)
{
    int present = (int) round(in_cutoutMask);

    if (present)
    {
        int ray_depth = 0;
        int status = getattribute("path:ray_depth", ray_depth);

        if (status && ray_depth <= in_maximumRayDepth)
        {
            vector tangent = Tn;

            if (in_anisotropy != 0 && in_anisotropyRotation > 0)
            {
                tangent = rotate(
                    Tn,
                    in_anisotropyRotation * M_2PI,
                    point(0),
                    point(in_normalCamera));
            }

            string distribution = (in_distribution) ? "ggx" : "beckmann";

            out_outColor = in_transmittanceAmount *
                as_glass(
                    distribution,
                    normalize(in_normalCamera),
                    tangent,
                    in_surfaceTransmittance,
                    in_reflectionTint,
                    in_refractionTint,
                    in_roughness,
                    in_anisotropy,
                    in_ior,
                    in_volumeTransmittance,
                    in_volumeTransmittanceDistance);
        }

        closure color matte_term;

        if (in_matteOpacityMode == 0)
        {
            matte_term = 0;
        }
        else if (in_matteOpacityMode == 1)
        {
            matte_term = holdout();
        }
        else
        {
            matte_term = in_matteOpacity * holdout();
        }

        out_outMatteOpacity = matte_term;

        out_outColor += matte_term;
    }
    else
    {
        out_outColor = out_outTransparency = transparent();
    }
}

