
//
// This software is released under the MIT licence
//
// Copyright (c) 2013 Anders Langlands
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

// This code comes from alshaders's OSL branch, with minimal changes.
// https://bitbucket.org/anderslanglands/alshaders/branch/osl

shader alJitterColor
[[
    string maya_node_name = "alJitterColor"
]]
(
    color input = color(1),
    float minSaturation = 0.0,
    float maxSaturation = 1.0,
    float minHueOffset = -1.0,
    float maxHueOffset = 1.0,
    float minGain = 0.0,
    float maxGain = 1.0,
    float clampResult = 1,
    float signal = 0.0,
    output color result = color(0)
    [[
        string maya_attribute_name = "outColor",
        string maya_attribute_short_name = "oc"
    ]]
)
{
    result = input;

    float saturation = noise("cell", signal, 51731.132151);
    saturation = mix(minSaturation, maxSaturation, saturation);
    if (saturation != 1)
    {
        float l = luminance(result);
        result = mix(color(l), result, saturation);
    }

    float hueOffset = noise("cell", signal, 173.1231);
    hueOffset = mix(minHueOffset, maxHueOffset, hueOffset);
    if (hueOffset != 0)
    {
        color hsv = transformc("hsv", result);
        hsv[0] += hueOffset;
        result = transformc("rgb", hsv);
    }

    float gain = noise("cell", signal, 413.7254);
    gain = mix(minGain, maxGain, gain);
    result *= gain;

    if (clampResult)
    {
        result = clamp(result, color(0), color(1));
    }
}
