diff --git a/src/appleseed/CMakeLists.txt b/src/appleseed/CMakeLists.txt
index 11e46f4..f977948 100644
--- a/src/appleseed/CMakeLists.txt
+++ b/src/appleseed/CMakeLists.txt
@@ -1402,6 +1402,12 @@ set (renderer_modeling_environmentedf_sources
     renderer/modeling/environmentedf/preethamenvironmentedf.h
     renderer/modeling/environmentedf/sphericalcoordinates.h
 )
+if (WITH_OSL)
+    list (APPEND appleseed_sources
+        renderer/modeling/environmentedf/oslenvironmentedf.cpp
+        renderer/modeling/environmentedf/oslenvironmentedf.h
+    )
+endif ()
 list (APPEND appleseed_sources
     ${renderer_modeling_environmentedf_sources}
 )
diff --git a/src/appleseed/renderer/kernel/lighting/drt/drtlightingengine.cpp b/src/appleseed/renderer/kernel/lighting/drt/drtlightingengine.cpp
index 64d4795..fc3df7a 100644
--- a/src/appleseed/renderer/kernel/lighting/drt/drtlightingengine.cpp
+++ b/src/appleseed/renderer/kernel/lighting/drt/drtlightingengine.cpp
@@ -409,6 +409,7 @@ namespace
                 Spectrum env_radiance;
                 double env_prob;
                 m_env_edf->evaluate(
+                    m_shading_context,
                     input_evaluator,
                     -vertex.m_outgoing,
                     env_radiance,
diff --git a/src/appleseed/renderer/kernel/lighting/imagebasedlighting.cpp b/src/appleseed/renderer/kernel/lighting/imagebasedlighting.cpp
index bfeed28..60b4301 100644
--- a/src/appleseed/renderer/kernel/lighting/imagebasedlighting.cpp
+++ b/src/appleseed/renderer/kernel/lighting/imagebasedlighting.cpp
@@ -150,6 +150,7 @@ void compute_ibl_bsdf_sampling(
         Spectrum env_value;
         double env_prob;
         environment_edf.evaluate(
+            shading_context,
             input_evaluator,
             sample.get_incoming(),
             env_value,
@@ -213,6 +214,7 @@ void compute_ibl_environment_sampling(
         Spectrum env_value;
         double env_prob;
         environment_edf.sample(
+            shading_context,
             input_evaluator,
             s,
             incoming,
diff --git a/src/appleseed/renderer/kernel/lighting/lighttracing/lighttracingsamplegenerator.cpp b/src/appleseed/renderer/kernel/lighting/lighttracing/lighttracingsamplegenerator.cpp
index 87f47c9..c5e3d4e 100644
--- a/src/appleseed/renderer/kernel/lighting/lighttracing/lighttracingsamplegenerator.cpp
+++ b/src/appleseed/renderer/kernel/lighting/lighttracing/lighttracingsamplegenerator.cpp
@@ -757,6 +757,7 @@ namespace
             Spectrum env_edf_value;
             double env_edf_prob;
             env_edf->sample(
+                m_shading_context,
                 input_evaluator,
                 sampling_context.next_vector2<2>(),
                 outgoing,               // points toward the environment
diff --git a/src/appleseed/renderer/kernel/lighting/pt/ptlightingengine.cpp b/src/appleseed/renderer/kernel/lighting/pt/ptlightingengine.cpp
index 1b2ab74..198cf5f 100644
--- a/src/appleseed/renderer/kernel/lighting/pt/ptlightingengine.cpp
+++ b/src/appleseed/renderer/kernel/lighting/pt/ptlightingengine.cpp
@@ -378,6 +378,7 @@ namespace
                 Spectrum env_radiance;
                 double env_prob;
                 m_env_edf->evaluate(
+                    m_shading_context,
                     input_evaluator,
                     -vertex.m_outgoing,
                     env_radiance,
@@ -638,6 +639,7 @@ namespace
                 Spectrum env_radiance;
                 double env_prob;
                 m_env_edf->evaluate(
+                    m_shading_context,
                     input_evaluator,
                     -vertex.m_outgoing,
                     env_radiance,
diff --git a/src/appleseed/renderer/kernel/lighting/sppm/sppmlightingengine.cpp b/src/appleseed/renderer/kernel/lighting/sppm/sppmlightingengine.cpp
index 156112b..4a7de3c 100644
--- a/src/appleseed/renderer/kernel/lighting/sppm/sppmlightingengine.cpp
+++ b/src/appleseed/renderer/kernel/lighting/sppm/sppmlightingengine.cpp
@@ -580,6 +580,7 @@ namespace
                 Spectrum env_radiance;
                 double env_prob;
                 m_env_edf->evaluate(
+                    m_shading_context,
                     input_evaluator,
                     -vertex.m_outgoing,
                     env_radiance,
diff --git a/src/appleseed/renderer/kernel/lighting/sppm/sppmphotontracer.cpp b/src/appleseed/renderer/kernel/lighting/sppm/sppmphotontracer.cpp
index 9a6f4ee..2f30ff9 100644
--- a/src/appleseed/renderer/kernel/lighting/sppm/sppmphotontracer.cpp
+++ b/src/appleseed/renderer/kernel/lighting/sppm/sppmphotontracer.cpp
@@ -592,6 +592,7 @@ namespace
             Spectrum env_edf_value;
             double env_edf_prob;
             m_env_edf.sample(
+                shading_context,
                 input_evaluator,
                 sampling_context.next_vector2<2>(),
                 outgoing,                                   // points toward the environment
diff --git a/src/appleseed/renderer/kernel/shading/oslshadergroupexec.cpp b/src/appleseed/renderer/kernel/shading/oslshadergroupexec.cpp
index 06acb34..2bfa759 100644
--- a/src/appleseed/renderer/kernel/shading/oslshadergroupexec.cpp
+++ b/src/appleseed/renderer/kernel/shading/oslshadergroupexec.cpp
@@ -116,8 +116,8 @@ void OSLShaderGroupExec::execute_emission(
 }
 
 Color3f OSLShaderGroupExec::execute_background(
-    const ShaderGroup&  shader_group,
-    const Vector3d&     outgoing) const
+    const ShaderGroup&              shader_group,
+    const Vector3d&                 outgoing) const
 {
     assert(m_osl_shading_context);
     assert(m_osl_thread_info);
diff --git a/src/appleseed/renderer/kernel/shading/oslshadergroupexec.h b/src/appleseed/renderer/kernel/shading/oslshadergroupexec.h
index ca341b7..607aa30 100644
--- a/src/appleseed/renderer/kernel/shading/oslshadergroupexec.h
+++ b/src/appleseed/renderer/kernel/shading/oslshadergroupexec.h
@@ -36,6 +36,7 @@
 // appleseed.foundation headers.
 #include "foundation/core/concepts/noncopyable.h"
 #include "foundation/image/color.h"
+#include "foundation/math/vector.h"
 
 // OSL headers.
 #include "foundation/platform/oslheaderguards.h"
@@ -91,8 +92,8 @@ class OSLShaderGroupExec
         const float                     surface_area) const;
 
     foundation::Color3f execute_background(
-        const ShaderGroup&          shader_group,
-        const foundation::Vector3d& outgoing) const;
+        const ShaderGroup&              shader_group,
+        const foundation::Vector3d&     outgoing) const;
 
     void do_execute(
         const ShaderGroup&              shader_group,
diff --git a/src/appleseed/renderer/kernel/shading/shadingengine.cpp b/src/appleseed/renderer/kernel/shading/shadingengine.cpp
index edcaed9..09455e6 100644
--- a/src/appleseed/renderer/kernel/shading/shadingengine.cpp
+++ b/src/appleseed/renderer/kernel/shading/shadingengine.cpp
@@ -178,6 +178,7 @@ void ShadingEngine::shade_environment(
         const ShadingRay& ray = shading_point.get_ray();
         const Vector3d direction = normalize(ray.m_dir);
         environment_shader->evaluate(
+            shading_context,
             input_evaluator,
             direction,
             shading_result);
diff --git a/src/appleseed/renderer/meta/tests/test_environmentedf.cpp b/src/appleseed/renderer/meta/tests/test_environmentedf.cpp
index 594af01..44b0821 100644
--- a/src/appleseed/renderer/meta/tests/test_environmentedf.cpp
+++ b/src/appleseed/renderer/meta/tests/test_environmentedf.cpp
@@ -29,6 +29,13 @@
 
 // appleseed.renderer headers.
 #include "renderer/global/globaltypes.h"
+#include "renderer/kernel/intersection/intersector.h"
+#include "renderer/kernel/lighting/tracer.h"
+#ifdef APPLESEED_WITH_OSL
+#include "renderer/kernel/rendering/rendererservices.h"
+#include "renderer/kernel/shading/oslshadergroupexec.h"
+#endif
+#include "renderer/kernel/shading/shadingcontext.h"
 #include "renderer/kernel/texturing/texturecache.h"
 #include "renderer/kernel/texturing/texturestore.h"
 #include "renderer/modeling/environmentedf/constantenvironmentedf.h"
@@ -54,6 +61,23 @@
 #include "foundation/utility/autoreleaseptr.h"
 #include "foundation/utility/test.h"
 
+// OSL headers.
+#ifdef APPLESEED_WITH_OSL
+#include "foundation/platform/oslheaderguards.h"
+BEGIN_OSL_INCLUDES
+#include "OSL/oslexec.h"
+END_OSL_INCLUDES
+#endif
+
+// OpenImageIO headers.
+#ifdef APPLESEED_WITH_OIIO
+#include "OpenImageIO/texture.h"
+#endif
+
+// Boost headers.
+#include "boost/bind.hpp"
+#include "boost/shared_ptr.hpp"
+
 // Standard headers.
 #include <cassert>
 #include <cstddef>
@@ -162,6 +186,50 @@ TEST_SUITE(Renderer_Modeling_EnvironmentEDF)
 
             TextureStore texture_store(m_scene);
             TextureCache texture_cache(texture_store);
+
+#ifdef APPLESEED_WITH_OIIO
+            boost::shared_ptr<OIIO::TextureSystem> texture_system(
+                OIIO::TextureSystem::create(),
+                boost::bind(&OIIO::TextureSystem::destroy, _1));
+#endif
+#ifdef APPLESEED_WITH_OSL
+            RendererServices renderer_services(
+                m_project,
+                *texture_system,
+                texture_store);
+
+            boost::shared_ptr<OSL::ShadingSystem> shading_system(
+                new OSL::ShadingSystem(&renderer_services, texture_system.get()));
+#endif
+
+            Intersector intersector(
+                m_project.get_trace_context(),
+                texture_cache);
+
+    #ifdef APPLESEED_WITH_OSL
+            OSLShaderGroupExec sg_exec(*shading_system);
+    #endif
+            Tracer tracer(
+                m_scene,
+                intersector,
+                texture_cache
+    #ifdef APPLESEED_WITH_OSL
+                , sg_exec
+    #endif
+                );
+
+            ShadingContext shading_context(
+                intersector,
+                tracer,
+                texture_cache
+    #ifdef APPLESEED_WITH_OIIO
+                , *texture_system
+    #endif
+    #ifdef APPLESEED_WITH_OSL
+                , sg_exec
+    #endif
+                , 0);
+
             InputEvaluator input_evaluator(texture_cache);
 
             Vector3d outgoing;
@@ -169,6 +237,7 @@ TEST_SUITE(Renderer_Modeling_EnvironmentEDF)
             double probability1;
 
             env_edf.sample(
+                shading_context,
                 input_evaluator,
                 Vector2d(0.3, 0.7),
                 outgoing,
@@ -178,6 +247,7 @@ TEST_SUITE(Renderer_Modeling_EnvironmentEDF)
             Spectrum value2;
 
             env_edf.evaluate(
+                shading_context,
                 input_evaluator,
                 outgoing,
                 value2);
diff --git a/src/appleseed/renderer/modeling/environmentedf/constantenvironmentedf.cpp b/src/appleseed/renderer/modeling/environmentedf/constantenvironmentedf.cpp
index 438502b..5a2ab21 100644
--- a/src/appleseed/renderer/modeling/environmentedf/constantenvironmentedf.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/constantenvironmentedf.cpp
@@ -106,11 +106,12 @@ namespace
         }
 
         virtual void sample(
-            InputEvaluator&     input_evaluator,
-            const Vector2d&     s,
-            Vector3d&           outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector2d&         s,
+            Vector3d&               outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             outgoing = sample_sphere_uniform(s);
             value = m_values.m_radiance;
@@ -118,19 +119,21 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             value = m_values.m_radiance;
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             value = m_values.m_radiance;
diff --git a/src/appleseed/renderer/modeling/environmentedf/constanthemisphereenvironmentedf.cpp b/src/appleseed/renderer/modeling/environmentedf/constanthemisphereenvironmentedf.cpp
index dcb4344..f2cdd95 100644
--- a/src/appleseed/renderer/modeling/environmentedf/constanthemisphereenvironmentedf.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/constanthemisphereenvironmentedf.cpp
@@ -107,11 +107,12 @@ namespace
         }
 
         virtual void sample(
-            InputEvaluator&     input_evaluator,
-            const Vector2d&     s,
-            Vector3d&           outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector2d&         s,
+            Vector3d&               outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             outgoing = sample_sphere_uniform(s);
             value =
@@ -122,9 +123,10 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             value =
@@ -134,10 +136,11 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             value =
diff --git a/src/appleseed/renderer/modeling/environmentedf/environmentedf.h b/src/appleseed/renderer/modeling/environmentedf/environmentedf.h
index 73cedcc..22099e2 100644
--- a/src/appleseed/renderer/modeling/environmentedf/environmentedf.h
+++ b/src/appleseed/renderer/modeling/environmentedf/environmentedf.h
@@ -46,6 +46,7 @@ namespace foundation    { class IAbortSwitch; }
 namespace renderer      { class InputEvaluator; }
 namespace renderer      { class ParamArray; }
 namespace renderer      { class Project; }
+namespace renderer      { class ShadingContext; }
 
 namespace renderer
 {
@@ -85,6 +86,7 @@ class APPLESEED_DLLSYMBOL EnvironmentEDF
     // Sample the EDF and compute the emission direction, its probability
     // density and the value of the EDF for this direction.
     virtual void sample(
+        const ShadingContext&       shading_context,
         InputEvaluator&             input_evaluator,
         const foundation::Vector2d& s,                          // sample in [0,1)^2
         foundation::Vector3d&       outgoing,                   // world space emission direction, unit-length
@@ -93,10 +95,12 @@ class APPLESEED_DLLSYMBOL EnvironmentEDF
 
     // Evaluate the EDF for a given emission direction.
     virtual void evaluate(
+        const ShadingContext&       shading_context,
         InputEvaluator&             input_evaluator,
         const foundation::Vector3d& outgoing,                   // world space emission direction, unit-length
         Spectrum&                   value) const = 0;           // EDF value for this direction
     virtual void evaluate(
+        const ShadingContext&       shading_context,
         InputEvaluator&             input_evaluator,
         const foundation::Vector3d& outgoing,                   // world space emission direction, unit-length
         Spectrum&                   value,                      // EDF value for this direction
diff --git a/src/appleseed/renderer/modeling/environmentedf/environmentedffactoryregistrar.cpp b/src/appleseed/renderer/modeling/environmentedf/environmentedffactoryregistrar.cpp
index 71b28a0..ba53635 100644
--- a/src/appleseed/renderer/modeling/environmentedf/environmentedffactoryregistrar.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/environmentedffactoryregistrar.cpp
@@ -38,6 +38,9 @@
 #include "renderer/modeling/environmentedf/ienvironmentedffactory.h"
 #include "renderer/modeling/environmentedf/latlongmapenvironmentedf.h"
 #include "renderer/modeling/environmentedf/mirrorballmapenvironmentedf.h"
+#ifdef APPLESEED_WITH_OSL
+#include "renderer/modeling/environmentedf/oslenvironmentedf.h"
+#endif
 #include "renderer/modeling/environmentedf/preethamenvironmentedf.h"
 
 // appleseed.foundation headers.
@@ -70,6 +73,9 @@ EnvironmentEDFFactoryRegistrar::EnvironmentEDFFactoryRegistrar()
     register_factory(auto_ptr<FactoryType>(new HosekEnvironmentEDFFactory()));
     register_factory(auto_ptr<FactoryType>(new LatLongMapEnvironmentEDFFactory()));
     register_factory(auto_ptr<FactoryType>(new MirrorBallMapEnvironmentEDFFactory()));
+#ifdef APPLESEED_WITH_OSL
+    register_factory(auto_ptr<FactoryType>(new OSLEnvironmentEDFFactory()));
+#endif
     register_factory(auto_ptr<FactoryType>(new PreethamEnvironmentEDFFactory()));
 }
 
diff --git a/src/appleseed/renderer/modeling/environmentedf/gradientenvironmentedf.cpp b/src/appleseed/renderer/modeling/environmentedf/gradientenvironmentedf.cpp
index 9cb9b7b..a765e90 100644
--- a/src/appleseed/renderer/modeling/environmentedf/gradientenvironmentedf.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/gradientenvironmentedf.cpp
@@ -108,11 +108,12 @@ namespace
         }
 
         virtual void sample(
-            InputEvaluator&     input_evaluator,
-            const Vector2d&     s,
-            Vector3d&           outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector2d&         s,
+            Vector3d&               outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             outgoing = sample_sphere_uniform(s);
             compute_gradient(outgoing.y, value);
@@ -120,19 +121,21 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             compute_gradient(outgoing.y, value);
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             compute_gradient(outgoing.y, value);
diff --git a/src/appleseed/renderer/modeling/environmentedf/hosekenvironmentedf.cpp b/src/appleseed/renderer/modeling/environmentedf/hosekenvironmentedf.cpp
index 3982a42..a31bb7a 100644
--- a/src/appleseed/renderer/modeling/environmentedf/hosekenvironmentedf.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/hosekenvironmentedf.cpp
@@ -156,11 +156,12 @@ namespace
         }
 
         virtual void sample(
-            InputEvaluator&     input_evaluator,
-            const Vector2d&     s,
-            Vector3d&           outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector2d&         s,
+            Vector3d&               outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             outgoing = sample_hemisphere_cosine(s);
 
@@ -173,9 +174,10 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
 
@@ -186,10 +188,11 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
 
diff --git a/src/appleseed/renderer/modeling/environmentedf/latlongmapenvironmentedf.cpp b/src/appleseed/renderer/modeling/environmentedf/latlongmapenvironmentedf.cpp
index 564b71d..0d8acb8 100644
--- a/src/appleseed/renderer/modeling/environmentedf/latlongmapenvironmentedf.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/latlongmapenvironmentedf.cpp
@@ -191,11 +191,12 @@ namespace
         }
 
         virtual void sample(
-            InputEvaluator&     input_evaluator,
-            const Vector2d&     s,
-            Vector3d&           outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector2d&         s,
+            Vector3d&               outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             // Sample the importance map.
             Payload payload;
@@ -227,9 +228,10 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
 
@@ -247,10 +249,11 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
 
diff --git a/src/appleseed/renderer/modeling/environmentedf/mirrorballmapenvironmentedf.cpp b/src/appleseed/renderer/modeling/environmentedf/mirrorballmapenvironmentedf.cpp
index 34decb0..5dece6b 100644
--- a/src/appleseed/renderer/modeling/environmentedf/mirrorballmapenvironmentedf.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/mirrorballmapenvironmentedf.cpp
@@ -108,11 +108,12 @@ namespace
         }
 
         virtual void sample(
-            InputEvaluator&     input_evaluator,
-            const Vector2d&     s,
-            Vector3d&           outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector2d&         s,
+            Vector3d&               outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             outgoing = sample_sphere_uniform(s);
             lookup_envmap(input_evaluator, outgoing, value);
@@ -120,19 +121,21 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             lookup_envmap(input_evaluator, outgoing, value);
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
             lookup_envmap(input_evaluator, outgoing, value);
diff --git a/src/appleseed/renderer/modeling/environmentedf/preethamenvironmentedf.cpp b/src/appleseed/renderer/modeling/environmentedf/preethamenvironmentedf.cpp
index 2ac90aa..e0e44c8 100644
--- a/src/appleseed/renderer/modeling/environmentedf/preethamenvironmentedf.cpp
+++ b/src/appleseed/renderer/modeling/environmentedf/preethamenvironmentedf.cpp
@@ -152,11 +152,12 @@ namespace
         }
 
         virtual void sample(
-            InputEvaluator&     input_evaluator,
-            const Vector2d&     s,
-            Vector3d&           outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector2d&         s,
+            Vector3d&               outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             outgoing = sample_hemisphere_cosine(s);
 
@@ -169,9 +170,10 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
 
@@ -182,10 +184,11 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     outgoing,
-            Spectrum&           value,
-            double&             probability) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         outgoing,
+            Spectrum&               value,
+            double&                 probability) const APPLESEED_OVERRIDE
         {
             assert(is_normalized(outgoing));
 
diff --git a/src/appleseed/renderer/modeling/environmentshader/edfenvironmentshader.cpp b/src/appleseed/renderer/modeling/environmentshader/edfenvironmentshader.cpp
index 16d7efd..ea84fb9 100644
--- a/src/appleseed/renderer/modeling/environmentshader/edfenvironmentshader.cpp
+++ b/src/appleseed/renderer/modeling/environmentshader/edfenvironmentshader.cpp
@@ -123,9 +123,10 @@ namespace
         }
 
         virtual void evaluate(
-            InputEvaluator&     input_evaluator,
-            const Vector3d&     direction,
-            ShadingResult&      shading_result) const APPLESEED_OVERRIDE
+            const ShadingContext&   shading_context,
+            InputEvaluator&         input_evaluator,
+            const Vector3d&         direction,
+            ShadingResult&          shading_result) const APPLESEED_OVERRIDE
         {
             // Initialize the shading result.
             shading_result.m_color_space = ColorSpaceSpectral;
@@ -135,6 +136,7 @@ namespace
 
             // Evaluate the environment EDF and store the radiance into the shading result.
             m_env_edf->evaluate(
+                shading_context,
                 input_evaluator,
                 direction,
                 shading_result.m_main.m_color);
diff --git a/src/appleseed/renderer/modeling/environmentshader/environmentshader.h b/src/appleseed/renderer/modeling/environmentshader/environmentshader.h
index 7f4dcce..6e6ecb9 100644
--- a/src/appleseed/renderer/modeling/environmentshader/environmentshader.h
+++ b/src/appleseed/renderer/modeling/environmentshader/environmentshader.h
@@ -45,6 +45,7 @@ namespace foundation    { class IAbortSwitch; }
 namespace renderer      { class InputEvaluator; }
 namespace renderer      { class ParamArray; }
 namespace renderer      { class Project; }
+namespace renderer      { class ShadingContext; }
 namespace renderer      { class ShadingResult; }
 
 namespace renderer
@@ -80,6 +81,7 @@ class APPLESEED_DLLSYMBOL EnvironmentShader
 
     // Evaluate the environment for a given unit-length direction.
     virtual void evaluate(
+        const ShadingContext&       shading_context,
         InputEvaluator&             input_evaluator,
         const foundation::Vector3d& direction,                      // world space direction, pointing toward the environment
         ShadingResult&              shading_result) const = 0;
diff --git a/src/appleseed/renderer/modeling/surfaceshader/physicalsurfaceshader.cpp b/src/appleseed/renderer/modeling/surfaceshader/physicalsurfaceshader.cpp
index 61fcadc..ca53cbe 100644
--- a/src/appleseed/renderer/modeling/surfaceshader/physicalsurfaceshader.cpp
+++ b/src/appleseed/renderer/modeling/surfaceshader/physicalsurfaceshader.cpp
@@ -344,7 +344,7 @@ namespace
                     const ShadingRay& ray = shading_point.get_ray();
                     const Vector3d direction = normalize(ray.m_dir);
                     ShadingResult sky;
-                    environment_shader->evaluate(input_evaluator, direction, sky);
+                    environment_shader->evaluate(shading_context, input_evaluator, direction, sky);
                     sky_color = sky.m_main.m_color;
                 }
                 else sky_color.set(0.0f);
